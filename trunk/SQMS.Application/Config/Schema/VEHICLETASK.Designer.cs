//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SQMS.Application.Config.Schema {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("VEHICLETASK")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class VEHICLETASK : global::System.Data.DataSet {
        
        private VEHICLETASKDataTable tableVEHICLETASK;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VEHICLETASK() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected VEHICLETASK(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["VEHICLETASK"] != null)) {
                    base.Tables.Add(new VEHICLETASKDataTable(ds.Tables["VEHICLETASK"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VEHICLETASKDataTable _VEHICLETASK {
            get {
                return this.tableVEHICLETASK;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            VEHICLETASK cln = ((VEHICLETASK)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["VEHICLETASK"] != null)) {
                    base.Tables.Add(new VEHICLETASKDataTable(ds.Tables["VEHICLETASK"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableVEHICLETASK = ((VEHICLETASKDataTable)(base.Tables["VEHICLETASK"]));
            if ((initTable == true)) {
                if ((this.tableVEHICLETASK != null)) {
                    this.tableVEHICLETASK.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "VEHICLETASK";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/VEHICLETASK.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableVEHICLETASK = new VEHICLETASKDataTable();
            base.Tables.Add(this.tableVEHICLETASK);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_VEHICLETASK() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            VEHICLETASK ds = new VEHICLETASK();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void VEHICLETASKRowChangeEventHandler(object sender, VEHICLETASKRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VEHICLETASKDataTable : global::System.Data.TypedTableBase<VEHICLETASKRow> {
            
            private global::System.Data.DataColumn columnTASKID;
            
            private global::System.Data.DataColumn columnTASKNAME;
            
            private global::System.Data.DataColumn columnPUBLICTIME;
            
            private global::System.Data.DataColumn columnSTARTTIME;
            
            private global::System.Data.DataColumn columnENDTIME;
            
            private global::System.Data.DataColumn columnMODEL;
            
            private global::System.Data.DataColumn columnTASKTYPE;
            
            private global::System.Data.DataColumn columnTRACE;
            
            private global::System.Data.DataColumn columnCHARGEMAN;
            
            private global::System.Data.DataColumn columnLICENSEPLATENUM;
            
            private global::System.Data.DataColumn columnISGASSUPPLIED;
            
            private global::System.Data.DataColumn columnISWATERSUPPLIED;
            
            private global::System.Data.DataColumn columnISREPAIRED;
            
            private global::System.Data.DataColumn columnCREATED;
            
            private global::System.Data.DataColumn columnCREATEDBY;
            
            private global::System.Data.DataColumn columnMODIFIED;
            
            private global::System.Data.DataColumn columnMODIFIEDBY;
            
            private global::System.Data.DataColumn columnISVOID;
            
            private global::System.Data.DataColumn columnMEMO;
            
            private global::System.Data.DataColumn columnTASKCODE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VEHICLETASKDataTable() {
                this.TableName = "VEHICLETASK";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VEHICLETASKDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VEHICLETASKDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASKIDColumn {
                get {
                    return this.columnTASKID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASKNAMEColumn {
                get {
                    return this.columnTASKNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PUBLICTIMEColumn {
                get {
                    return this.columnPUBLICTIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STARTTIMEColumn {
                get {
                    return this.columnSTARTTIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ENDTIMEColumn {
                get {
                    return this.columnENDTIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODELColumn {
                get {
                    return this.columnMODEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASKTYPEColumn {
                get {
                    return this.columnTASKTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRACEColumn {
                get {
                    return this.columnTRACE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHARGEMANColumn {
                get {
                    return this.columnCHARGEMAN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LICENSEPLATENUMColumn {
                get {
                    return this.columnLICENSEPLATENUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISGASSUPPLIEDColumn {
                get {
                    return this.columnISGASSUPPLIED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISWATERSUPPLIEDColumn {
                get {
                    return this.columnISWATERSUPPLIED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISREPAIREDColumn {
                get {
                    return this.columnISREPAIRED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATEDColumn {
                get {
                    return this.columnCREATED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATEDBYColumn {
                get {
                    return this.columnCREATEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODIFIEDColumn {
                get {
                    return this.columnMODIFIED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODIFIEDBYColumn {
                get {
                    return this.columnMODIFIEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISVOIDColumn {
                get {
                    return this.columnISVOID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEMOColumn {
                get {
                    return this.columnMEMO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TASKCODEColumn {
                get {
                    return this.columnTASKCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VEHICLETASKRow this[int index] {
                get {
                    return ((VEHICLETASKRow)(this.Rows[index]));
                }
            }
            
            public event VEHICLETASKRowChangeEventHandler VEHICLETASKRowChanging;
            
            public event VEHICLETASKRowChangeEventHandler VEHICLETASKRowChanged;
            
            public event VEHICLETASKRowChangeEventHandler VEHICLETASKRowDeleting;
            
            public event VEHICLETASKRowChangeEventHandler VEHICLETASKRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVEHICLETASKRow(VEHICLETASKRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VEHICLETASKRow AddVEHICLETASKRow(
                        string TASKID, 
                        string TASKNAME, 
                        System.DateTime PUBLICTIME, 
                        System.DateTime STARTTIME, 
                        System.DateTime ENDTIME, 
                        string MODEL, 
                        string TASKTYPE, 
                        string TRACE, 
                        string CHARGEMAN, 
                        string LICENSEPLATENUM, 
                        string ISGASSUPPLIED, 
                        string ISWATERSUPPLIED, 
                        string ISREPAIRED, 
                        System.DateTime CREATED, 
                        string CREATEDBY, 
                        System.DateTime MODIFIED, 
                        string MODIFIEDBY, 
                        string ISVOID, 
                        string MEMO, 
                        string TASKCODE) {
                VEHICLETASKRow rowVEHICLETASKRow = ((VEHICLETASKRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TASKID,
                        TASKNAME,
                        PUBLICTIME,
                        STARTTIME,
                        ENDTIME,
                        MODEL,
                        TASKTYPE,
                        TRACE,
                        CHARGEMAN,
                        LICENSEPLATENUM,
                        ISGASSUPPLIED,
                        ISWATERSUPPLIED,
                        ISREPAIRED,
                        CREATED,
                        CREATEDBY,
                        MODIFIED,
                        MODIFIEDBY,
                        ISVOID,
                        MEMO,
                        TASKCODE};
                rowVEHICLETASKRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVEHICLETASKRow);
                return rowVEHICLETASKRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VEHICLETASKRow FindByTASKID(string TASKID) {
                return ((VEHICLETASKRow)(this.Rows.Find(new object[] {
                            TASKID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VEHICLETASKDataTable cln = ((VEHICLETASKDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VEHICLETASKDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTASKID = base.Columns["TASKID"];
                this.columnTASKNAME = base.Columns["TASKNAME"];
                this.columnPUBLICTIME = base.Columns["PUBLICTIME"];
                this.columnSTARTTIME = base.Columns["STARTTIME"];
                this.columnENDTIME = base.Columns["ENDTIME"];
                this.columnMODEL = base.Columns["MODEL"];
                this.columnTASKTYPE = base.Columns["TASKTYPE"];
                this.columnTRACE = base.Columns["TRACE"];
                this.columnCHARGEMAN = base.Columns["CHARGEMAN"];
                this.columnLICENSEPLATENUM = base.Columns["LICENSEPLATENUM"];
                this.columnISGASSUPPLIED = base.Columns["ISGASSUPPLIED"];
                this.columnISWATERSUPPLIED = base.Columns["ISWATERSUPPLIED"];
                this.columnISREPAIRED = base.Columns["ISREPAIRED"];
                this.columnCREATED = base.Columns["CREATED"];
                this.columnCREATEDBY = base.Columns["CREATEDBY"];
                this.columnMODIFIED = base.Columns["MODIFIED"];
                this.columnMODIFIEDBY = base.Columns["MODIFIEDBY"];
                this.columnISVOID = base.Columns["ISVOID"];
                this.columnMEMO = base.Columns["MEMO"];
                this.columnTASKCODE = base.Columns["TASKCODE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTASKID = new global::System.Data.DataColumn("TASKID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASKID);
                this.columnTASKNAME = new global::System.Data.DataColumn("TASKNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASKNAME);
                this.columnPUBLICTIME = new global::System.Data.DataColumn("PUBLICTIME", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPUBLICTIME);
                this.columnSTARTTIME = new global::System.Data.DataColumn("STARTTIME", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTARTTIME);
                this.columnENDTIME = new global::System.Data.DataColumn("ENDTIME", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnENDTIME);
                this.columnMODEL = new global::System.Data.DataColumn("MODEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODEL);
                this.columnTASKTYPE = new global::System.Data.DataColumn("TASKTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASKTYPE);
                this.columnTRACE = new global::System.Data.DataColumn("TRACE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRACE);
                this.columnCHARGEMAN = new global::System.Data.DataColumn("CHARGEMAN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHARGEMAN);
                this.columnLICENSEPLATENUM = new global::System.Data.DataColumn("LICENSEPLATENUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLICENSEPLATENUM);
                this.columnISGASSUPPLIED = new global::System.Data.DataColumn("ISGASSUPPLIED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISGASSUPPLIED);
                this.columnISWATERSUPPLIED = new global::System.Data.DataColumn("ISWATERSUPPLIED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISWATERSUPPLIED);
                this.columnISREPAIRED = new global::System.Data.DataColumn("ISREPAIRED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISREPAIRED);
                this.columnCREATED = new global::System.Data.DataColumn("CREATED", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATED);
                this.columnCREATEDBY = new global::System.Data.DataColumn("CREATEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATEDBY);
                this.columnMODIFIED = new global::System.Data.DataColumn("MODIFIED", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODIFIED);
                this.columnMODIFIEDBY = new global::System.Data.DataColumn("MODIFIEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODIFIEDBY);
                this.columnISVOID = new global::System.Data.DataColumn("ISVOID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISVOID);
                this.columnMEMO = new global::System.Data.DataColumn("MEMO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEMO);
                this.columnTASKCODE = new global::System.Data.DataColumn("TASKCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTASKCODE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTASKID}, true));
                this.columnTASKID.AllowDBNull = false;
                this.columnTASKID.Unique = true;
                this.columnTASKID.MaxLength = 40;
                this.columnTASKNAME.MaxLength = 60;
                this.columnPUBLICTIME.AllowDBNull = false;
                this.columnSTARTTIME.AllowDBNull = false;
                this.columnENDTIME.AllowDBNull = false;
                this.columnMODEL.MaxLength = 200;
                this.columnTASKTYPE.MaxLength = 40;
                this.columnTRACE.MaxLength = 2147483647;
                this.columnCHARGEMAN.MaxLength = 40;
                this.columnLICENSEPLATENUM.MaxLength = 400;
                this.columnISGASSUPPLIED.AllowDBNull = false;
                this.columnISGASSUPPLIED.MaxLength = 1;
                this.columnISWATERSUPPLIED.AllowDBNull = false;
                this.columnISWATERSUPPLIED.MaxLength = 1;
                this.columnISREPAIRED.AllowDBNull = false;
                this.columnISREPAIRED.MaxLength = 1;
                this.columnCREATED.AllowDBNull = false;
                this.columnCREATEDBY.MaxLength = 40;
                this.columnMODIFIED.AllowDBNull = false;
                this.columnMODIFIEDBY.MaxLength = 40;
                this.columnISVOID.AllowDBNull = false;
                this.columnISVOID.MaxLength = 1;
                this.columnMEMO.MaxLength = 2000;
                this.columnTASKCODE.AllowDBNull = false;
                this.columnTASKCODE.MaxLength = 40;
                this.ExtendedProperties.Add("Generator_TablePropName", "_VEHICLETASK");
                this.ExtendedProperties.Add("Generator_UserTableName", "VEHICLETASK");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VEHICLETASKRow NewVEHICLETASKRow() {
                return ((VEHICLETASKRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VEHICLETASKRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VEHICLETASKRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VEHICLETASKRowChanged != null)) {
                    this.VEHICLETASKRowChanged(this, new VEHICLETASKRowChangeEvent(((VEHICLETASKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VEHICLETASKRowChanging != null)) {
                    this.VEHICLETASKRowChanging(this, new VEHICLETASKRowChangeEvent(((VEHICLETASKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VEHICLETASKRowDeleted != null)) {
                    this.VEHICLETASKRowDeleted(this, new VEHICLETASKRowChangeEvent(((VEHICLETASKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VEHICLETASKRowDeleting != null)) {
                    this.VEHICLETASKRowDeleting(this, new VEHICLETASKRowChangeEvent(((VEHICLETASKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVEHICLETASKRow(VEHICLETASKRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                VEHICLETASK ds = new VEHICLETASK();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VEHICLETASKDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VEHICLETASKRow : global::System.Data.DataRow {
            
            private VEHICLETASKDataTable tableVEHICLETASK;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VEHICLETASKRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVEHICLETASK = ((VEHICLETASKDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TASKID {
                get {
                    return ((string)(this[this.tableVEHICLETASK.TASKIDColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.TASKIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TASKNAME {
                get {
                    try {
                        return ((string)(this[this.tableVEHICLETASK.TASKNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TASKNAME\' in table \'VEHICLETASK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVEHICLETASK.TASKNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PUBLICTIME {
                get {
                    return ((global::System.DateTime)(this[this.tableVEHICLETASK.PUBLICTIMEColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.PUBLICTIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime STARTTIME {
                get {
                    return ((global::System.DateTime)(this[this.tableVEHICLETASK.STARTTIMEColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.STARTTIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ENDTIME {
                get {
                    return ((global::System.DateTime)(this[this.tableVEHICLETASK.ENDTIMEColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.ENDTIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODEL {
                get {
                    try {
                        return ((string)(this[this.tableVEHICLETASK.MODELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MODEL\' in table \'VEHICLETASK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVEHICLETASK.MODELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TASKTYPE {
                get {
                    try {
                        return ((string)(this[this.tableVEHICLETASK.TASKTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TASKTYPE\' in table \'VEHICLETASK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVEHICLETASK.TASKTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRACE {
                get {
                    try {
                        return ((string)(this[this.tableVEHICLETASK.TRACEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRACE\' in table \'VEHICLETASK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVEHICLETASK.TRACEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHARGEMAN {
                get {
                    try {
                        return ((string)(this[this.tableVEHICLETASK.CHARGEMANColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CHARGEMAN\' in table \'VEHICLETASK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVEHICLETASK.CHARGEMANColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LICENSEPLATENUM {
                get {
                    try {
                        return ((string)(this[this.tableVEHICLETASK.LICENSEPLATENUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LICENSEPLATENUM\' in table \'VEHICLETASK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVEHICLETASK.LICENSEPLATENUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISGASSUPPLIED {
                get {
                    return ((string)(this[this.tableVEHICLETASK.ISGASSUPPLIEDColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.ISGASSUPPLIEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISWATERSUPPLIED {
                get {
                    return ((string)(this[this.tableVEHICLETASK.ISWATERSUPPLIEDColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.ISWATERSUPPLIEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISREPAIRED {
                get {
                    return ((string)(this[this.tableVEHICLETASK.ISREPAIREDColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.ISREPAIREDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATED {
                get {
                    return ((global::System.DateTime)(this[this.tableVEHICLETASK.CREATEDColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.CREATEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATEDBY {
                get {
                    try {
                        return ((string)(this[this.tableVEHICLETASK.CREATEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATEDBY\' in table \'VEHICLETASK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVEHICLETASK.CREATEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MODIFIED {
                get {
                    return ((global::System.DateTime)(this[this.tableVEHICLETASK.MODIFIEDColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.MODIFIEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODIFIEDBY {
                get {
                    try {
                        return ((string)(this[this.tableVEHICLETASK.MODIFIEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MODIFIEDBY\' in table \'VEHICLETASK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVEHICLETASK.MODIFIEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISVOID {
                get {
                    return ((string)(this[this.tableVEHICLETASK.ISVOIDColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.ISVOIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MEMO {
                get {
                    try {
                        return ((string)(this[this.tableVEHICLETASK.MEMOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MEMO\' in table \'VEHICLETASK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVEHICLETASK.MEMOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TASKCODE {
                get {
                    return ((string)(this[this.tableVEHICLETASK.TASKCODEColumn]));
                }
                set {
                    this[this.tableVEHICLETASK.TASKCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTASKNAMENull() {
                return this.IsNull(this.tableVEHICLETASK.TASKNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTASKNAMENull() {
                this[this.tableVEHICLETASK.TASKNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODELNull() {
                return this.IsNull(this.tableVEHICLETASK.MODELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODELNull() {
                this[this.tableVEHICLETASK.MODELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTASKTYPENull() {
                return this.IsNull(this.tableVEHICLETASK.TASKTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTASKTYPENull() {
                this[this.tableVEHICLETASK.TASKTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRACENull() {
                return this.IsNull(this.tableVEHICLETASK.TRACEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRACENull() {
                this[this.tableVEHICLETASK.TRACEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHARGEMANNull() {
                return this.IsNull(this.tableVEHICLETASK.CHARGEMANColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHARGEMANNull() {
                this[this.tableVEHICLETASK.CHARGEMANColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLICENSEPLATENUMNull() {
                return this.IsNull(this.tableVEHICLETASK.LICENSEPLATENUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLICENSEPLATENUMNull() {
                this[this.tableVEHICLETASK.LICENSEPLATENUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATEDBYNull() {
                return this.IsNull(this.tableVEHICLETASK.CREATEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATEDBYNull() {
                this[this.tableVEHICLETASK.CREATEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODIFIEDBYNull() {
                return this.IsNull(this.tableVEHICLETASK.MODIFIEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODIFIEDBYNull() {
                this[this.tableVEHICLETASK.MODIFIEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEMONull() {
                return this.IsNull(this.tableVEHICLETASK.MEMOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEMONull() {
                this[this.tableVEHICLETASK.MEMOColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VEHICLETASKRowChangeEvent : global::System.EventArgs {
            
            private VEHICLETASKRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VEHICLETASKRowChangeEvent(VEHICLETASKRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VEHICLETASKRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SQMS.Application.Config.Schema.VEHICLETASKTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class VEHICLETASKTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VEHICLETASKTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "VEHICLETASK";
            tableMapping.ColumnMappings.Add("TASKID", "TASKID");
            tableMapping.ColumnMappings.Add("TASKNAME", "TASKNAME");
            tableMapping.ColumnMappings.Add("PUBLICTIME", "PUBLICTIME");
            tableMapping.ColumnMappings.Add("STARTTIME", "STARTTIME");
            tableMapping.ColumnMappings.Add("ENDTIME", "ENDTIME");
            tableMapping.ColumnMappings.Add("MODEL", "MODEL");
            tableMapping.ColumnMappings.Add("TASKTYPE", "TASKTYPE");
            tableMapping.ColumnMappings.Add("TRACE", "TRACE");
            tableMapping.ColumnMappings.Add("CHARGEMAN", "CHARGEMAN");
            tableMapping.ColumnMappings.Add("LICENSEPLATENUM", "LICENSEPLATENUM");
            tableMapping.ColumnMappings.Add("ISGASSUPPLIED", "ISGASSUPPLIED");
            tableMapping.ColumnMappings.Add("ISWATERSUPPLIED", "ISWATERSUPPLIED");
            tableMapping.ColumnMappings.Add("ISREPAIRED", "ISREPAIRED");
            tableMapping.ColumnMappings.Add("CREATED", "CREATED");
            tableMapping.ColumnMappings.Add("CREATEDBY", "CREATEDBY");
            tableMapping.ColumnMappings.Add("MODIFIED", "MODIFIED");
            tableMapping.ColumnMappings.Add("MODIFIEDBY", "MODIFIEDBY");
            tableMapping.ColumnMappings.Add("ISVOID", "ISVOID");
            tableMapping.ColumnMappings.Add("MEMO", "MEMO");
            tableMapping.ColumnMappings.Add("TASKCODE", "TASKCODE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"SQMS_PRIVATE\".\"VEHICLETASK\" WHERE ((\"TASKID\" = :Original_TASKID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TASKID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TASKID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""SQMS_PRIVATE"".""VEHICLETASK"" (""TASKID"", ""TASKNAME"", ""PUBLICTIME"", ""STARTTIME"", ""ENDTIME"", ""MODEL"", ""TASKTYPE"", ""TRACE"", ""CHARGEMAN"", ""LICENSEPLATENUM"", ""ISGASSUPPLIED"", ""ISWATERSUPPLIED"", ""ISREPAIRED"", ""CREATED"", ""CREATEDBY"", ""MODIFIED"", ""MODIFIEDBY"", ""ISVOID"", ""MEMO"", ""TASKCODE"") VALUES (:TASKID, :TASKNAME, :PUBLICTIME, :STARTTIME, :ENDTIME, :MODEL, :TASKTYPE, :TRACE, :CHARGEMAN, :LICENSEPLATENUM, :ISGASSUPPLIED, :ISWATERSUPPLIED, :ISREPAIRED, :CREATED, :CREATEDBY, :MODIFIED, :MODIFIEDBY, :ISVOID, :MEMO, :TASKCODE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TASKID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TASKID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TASKNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TASKNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PUBLICTIME", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "PUBLICTIME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("STARTTIME", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "STARTTIME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ENDTIME", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "ENDTIME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TASKTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TASKTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TRACE", global::System.Data.OracleClient.OracleType.Clob, 0, global::System.Data.ParameterDirection.Input, "TRACE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CHARGEMAN", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CHARGEMAN", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LICENSEPLATENUM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "LICENSEPLATENUM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISGASSUPPLIED", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISGASSUPPLIED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISWATERSUPPLIED", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISWATERSUPPLIED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISREPAIRED", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISREPAIRED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "CREATED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CREATEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "MODIFIED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODIFIEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISVOID", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISVOID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MEMO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MEMO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TASKCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TASKCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""SQMS_PRIVATE"".""VEHICLETASK"" SET ""TASKID"" = :TASKID, ""TASKNAME"" = :TASKNAME, ""PUBLICTIME"" = :PUBLICTIME, ""STARTTIME"" = :STARTTIME, ""ENDTIME"" = :ENDTIME, ""MODEL"" = :MODEL, ""TASKTYPE"" = :TASKTYPE, ""TRACE"" = :TRACE, ""CHARGEMAN"" = :CHARGEMAN, ""LICENSEPLATENUM"" = :LICENSEPLATENUM, ""ISGASSUPPLIED"" = :ISGASSUPPLIED, ""ISWATERSUPPLIED"" = :ISWATERSUPPLIED, ""ISREPAIRED"" = :ISREPAIRED, ""CREATED"" = :CREATED, ""CREATEDBY"" = :CREATEDBY, ""MODIFIED"" = :MODIFIED, ""MODIFIEDBY"" = :MODIFIEDBY, ""ISVOID"" = :ISVOID, ""MEMO"" = :MEMO, ""TASKCODE"" = :TASKCODE WHERE ((""TASKID"" = :Original_TASKID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TASKID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TASKID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TASKNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TASKNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PUBLICTIME", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "PUBLICTIME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("STARTTIME", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "STARTTIME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ENDTIME", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "ENDTIME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TASKTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TASKTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TRACE", global::System.Data.OracleClient.OracleType.Clob, 0, global::System.Data.ParameterDirection.Input, "TRACE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CHARGEMAN", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CHARGEMAN", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LICENSEPLATENUM", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "LICENSEPLATENUM", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISGASSUPPLIED", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISGASSUPPLIED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISWATERSUPPLIED", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISWATERSUPPLIED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISREPAIRED", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISREPAIRED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "CREATED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CREATEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "MODIFIED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODIFIEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISVOID", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISVOID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MEMO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MEMO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("TASKCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TASKCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_TASKID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "TASKID", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString2"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TASKID, TASKNAME, PUBLICTIME, STARTTIME, ENDTIME, MODEL, TASKTYPE, \"TRACE\"" +
                ", CHARGEMAN, LICENSEPLATENUM, ISGASSUPPLIED, ISWATERSUPPLIED, ISREPAIRED, CREATE" +
                "D, CREATEDBY, MODIFIED, MODIFIEDBY, ISVOID, MEMO, TASKCODE FROM SQMS_PRIVATE.VEH" +
                "ICLETASK";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(VEHICLETASK.VEHICLETASKDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual VEHICLETASK.VEHICLETASKDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            VEHICLETASK.VEHICLETASKDataTable dataTable = new VEHICLETASK.VEHICLETASKDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VEHICLETASK.VEHICLETASKDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VEHICLETASK dataSet) {
            return this.Adapter.Update(dataSet, "VEHICLETASK");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_TASKID) {
            if ((Original_TASKID == null)) {
                throw new global::System.ArgumentNullException("Original_TASKID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_TASKID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string TASKID, 
                    string TASKNAME, 
                    System.DateTime PUBLICTIME, 
                    System.DateTime STARTTIME, 
                    System.DateTime ENDTIME, 
                    string MODEL, 
                    string TASKTYPE, 
                    string TRACE, 
                    string CHARGEMAN, 
                    string LICENSEPLATENUM, 
                    string ISGASSUPPLIED, 
                    string ISWATERSUPPLIED, 
                    string ISREPAIRED, 
                    System.DateTime CREATED, 
                    string CREATEDBY, 
                    System.DateTime MODIFIED, 
                    string MODIFIEDBY, 
                    string ISVOID, 
                    string MEMO, 
                    string TASKCODE) {
            if ((TASKID == null)) {
                throw new global::System.ArgumentNullException("TASKID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TASKID));
            }
            if ((TASKNAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TASKNAME));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(PUBLICTIME));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(STARTTIME));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(ENDTIME));
            if ((MODEL == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(MODEL));
            }
            if ((TASKTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(TASKTYPE));
            }
            if ((TRACE == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(TRACE));
            }
            if ((CHARGEMAN == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CHARGEMAN));
            }
            if ((LICENSEPLATENUM == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(LICENSEPLATENUM));
            }
            if ((ISGASSUPPLIED == null)) {
                throw new global::System.ArgumentNullException("ISGASSUPPLIED");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ISGASSUPPLIED));
            }
            if ((ISWATERSUPPLIED == null)) {
                throw new global::System.ArgumentNullException("ISWATERSUPPLIED");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ISWATERSUPPLIED));
            }
            if ((ISREPAIRED == null)) {
                throw new global::System.ArgumentNullException("ISREPAIRED");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(ISREPAIRED));
            }
            this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(CREATED));
            if ((CREATEDBY == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(CREATEDBY));
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(MODIFIED));
            if ((MODIFIEDBY == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(MODIFIEDBY));
            }
            if ((ISVOID == null)) {
                throw new global::System.ArgumentNullException("ISVOID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(ISVOID));
            }
            if ((MEMO == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(MEMO));
            }
            if ((TASKCODE == null)) {
                throw new global::System.ArgumentNullException("TASKCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(TASKCODE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string TASKID, 
                    string TASKNAME, 
                    System.DateTime PUBLICTIME, 
                    System.DateTime STARTTIME, 
                    System.DateTime ENDTIME, 
                    string MODEL, 
                    string TASKTYPE, 
                    string TRACE, 
                    string CHARGEMAN, 
                    string LICENSEPLATENUM, 
                    string ISGASSUPPLIED, 
                    string ISWATERSUPPLIED, 
                    string ISREPAIRED, 
                    System.DateTime CREATED, 
                    string CREATEDBY, 
                    System.DateTime MODIFIED, 
                    string MODIFIEDBY, 
                    string ISVOID, 
                    string MEMO, 
                    string TASKCODE, 
                    string Original_TASKID) {
            if ((TASKID == null)) {
                throw new global::System.ArgumentNullException("TASKID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TASKID));
            }
            if ((TASKNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TASKNAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(PUBLICTIME));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(STARTTIME));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(ENDTIME));
            if ((MODEL == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(MODEL));
            }
            if ((TASKTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(TASKTYPE));
            }
            if ((TRACE == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(TRACE));
            }
            if ((CHARGEMAN == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CHARGEMAN));
            }
            if ((LICENSEPLATENUM == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(LICENSEPLATENUM));
            }
            if ((ISGASSUPPLIED == null)) {
                throw new global::System.ArgumentNullException("ISGASSUPPLIED");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ISGASSUPPLIED));
            }
            if ((ISWATERSUPPLIED == null)) {
                throw new global::System.ArgumentNullException("ISWATERSUPPLIED");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ISWATERSUPPLIED));
            }
            if ((ISREPAIRED == null)) {
                throw new global::System.ArgumentNullException("ISREPAIRED");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(ISREPAIRED));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(CREATED));
            if ((CREATEDBY == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(CREATEDBY));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(MODIFIED));
            if ((MODIFIEDBY == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(MODIFIEDBY));
            }
            if ((ISVOID == null)) {
                throw new global::System.ArgumentNullException("ISVOID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(ISVOID));
            }
            if ((MEMO == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(MEMO));
            }
            if ((TASKCODE == null)) {
                throw new global::System.ArgumentNullException("TASKCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(TASKCODE));
            }
            if ((Original_TASKID == null)) {
                throw new global::System.ArgumentNullException("Original_TASKID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_TASKID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string TASKNAME, 
                    System.DateTime PUBLICTIME, 
                    System.DateTime STARTTIME, 
                    System.DateTime ENDTIME, 
                    string MODEL, 
                    string TASKTYPE, 
                    string TRACE, 
                    string CHARGEMAN, 
                    string LICENSEPLATENUM, 
                    string ISGASSUPPLIED, 
                    string ISWATERSUPPLIED, 
                    string ISREPAIRED, 
                    System.DateTime CREATED, 
                    string CREATEDBY, 
                    System.DateTime MODIFIED, 
                    string MODIFIEDBY, 
                    string ISVOID, 
                    string MEMO, 
                    string TASKCODE, 
                    string Original_TASKID) {
            return this.Update(Original_TASKID, TASKNAME, PUBLICTIME, STARTTIME, ENDTIME, MODEL, TASKTYPE, TRACE, CHARGEMAN, LICENSEPLATENUM, ISGASSUPPLIED, ISWATERSUPPLIED, ISREPAIRED, CREATED, CREATEDBY, MODIFIED, MODIFIEDBY, ISVOID, MEMO, TASKCODE, Original_TASKID);
        }
    }
}

#pragma warning restore 1591