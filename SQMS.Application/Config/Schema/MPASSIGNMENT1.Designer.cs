//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3082
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SQMS.Application.Config.Schema {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MPASSIGNMENT")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MPASSIGNMENT : global::System.Data.DataSet {
        
        private MPASSIGNMENTDataTable tableMPASSIGNMENT;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MPASSIGNMENT() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MPASSIGNMENT(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MPASSIGNMENT"] != null)) {
                    base.Tables.Add(new MPASSIGNMENTDataTable(ds.Tables["MPASSIGNMENT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MPASSIGNMENTDataTable _MPASSIGNMENT {
            get {
                return this.tableMPASSIGNMENT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MPASSIGNMENT cln = ((MPASSIGNMENT)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MPASSIGNMENT"] != null)) {
                    base.Tables.Add(new MPASSIGNMENTDataTable(ds.Tables["MPASSIGNMENT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableMPASSIGNMENT = ((MPASSIGNMENTDataTable)(base.Tables["MPASSIGNMENT"]));
            if ((initTable == true)) {
                if ((this.tableMPASSIGNMENT != null)) {
                    this.tableMPASSIGNMENT.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MPASSIGNMENT";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MPASSIGNMENT.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMPASSIGNMENT = new MPASSIGNMENTDataTable();
            base.Tables.Add(this.tableMPASSIGNMENT);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_MPASSIGNMENT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MPASSIGNMENT ds = new MPASSIGNMENT();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void MPASSIGNMENTRowChangeEventHandler(object sender, MPASSIGNMENTRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MPASSIGNMENTDataTable : global::System.Data.TypedTableBase<MPASSIGNMENTRow> {
            
            private global::System.Data.DataColumn columnMPID;
            
            private global::System.Data.DataColumn columnROADID;
            
            private global::System.Data.DataColumn columnSCHEMAID;
            
            private global::System.Data.DataColumn columnMPCODE;
            
            private global::System.Data.DataColumn columnMPNAME;
            
            private global::System.Data.DataColumn columnLONGITUDE;
            
            private global::System.Data.DataColumn columnLATITUDE;
            
            private global::System.Data.DataColumn columnMEMO;
            
            private global::System.Data.DataColumn columnCREATED;
            
            private global::System.Data.DataColumn columnCREATEDBY;
            
            private global::System.Data.DataColumn columnMODIFIED;
            
            private global::System.Data.DataColumn columnMODIFIEDBY;
            
            private global::System.Data.DataColumn columnORGANIZATIONID;
            
            private global::System.Data.DataColumn columnSUITEID;
            
            private global::System.Data.DataColumn columnISVOID;
            
            private global::System.Data.DataColumn columnMPLEVEL;
            
            private global::System.Data.DataColumn columnFLOATDIST;
            
            private global::System.Data.DataColumn columnIMPORTANCE;
            
            private global::System.Data.DataColumn columnEVENTID;
            
            private global::System.Data.DataColumn columnLATESTQCLEVEL;
            
            private global::System.Data.DataColumn columnISSTART;
            
            private global::System.Data.DataColumn columnISEND;
            
            private global::System.Data.DataColumn columnORDERINROAD;
            
            private global::System.Data.DataColumn columnMPTYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPASSIGNMENTDataTable() {
                this.TableName = "MPASSIGNMENT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MPASSIGNMENTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MPASSIGNMENTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPIDColumn {
                get {
                    return this.columnMPID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROADIDColumn {
                get {
                    return this.columnROADID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCHEMAIDColumn {
                get {
                    return this.columnSCHEMAID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPCODEColumn {
                get {
                    return this.columnMPCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPNAMEColumn {
                get {
                    return this.columnMPNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LONGITUDEColumn {
                get {
                    return this.columnLONGITUDE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LATITUDEColumn {
                get {
                    return this.columnLATITUDE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEMOColumn {
                get {
                    return this.columnMEMO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATEDColumn {
                get {
                    return this.columnCREATED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATEDBYColumn {
                get {
                    return this.columnCREATEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODIFIEDColumn {
                get {
                    return this.columnMODIFIED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODIFIEDBYColumn {
                get {
                    return this.columnMODIFIEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANIZATIONIDColumn {
                get {
                    return this.columnORGANIZATIONID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUITEIDColumn {
                get {
                    return this.columnSUITEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISVOIDColumn {
                get {
                    return this.columnISVOID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPLEVELColumn {
                get {
                    return this.columnMPLEVEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FLOATDISTColumn {
                get {
                    return this.columnFLOATDIST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IMPORTANCEColumn {
                get {
                    return this.columnIMPORTANCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EVENTIDColumn {
                get {
                    return this.columnEVENTID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LATESTQCLEVELColumn {
                get {
                    return this.columnLATESTQCLEVEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISSTARTColumn {
                get {
                    return this.columnISSTART;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISENDColumn {
                get {
                    return this.columnISEND;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDERINROADColumn {
                get {
                    return this.columnORDERINROAD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MPTYPEColumn {
                get {
                    return this.columnMPTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPASSIGNMENTRow this[int index] {
                get {
                    return ((MPASSIGNMENTRow)(this.Rows[index]));
                }
            }
            
            public event MPASSIGNMENTRowChangeEventHandler MPASSIGNMENTRowChanging;
            
            public event MPASSIGNMENTRowChangeEventHandler MPASSIGNMENTRowChanged;
            
            public event MPASSIGNMENTRowChangeEventHandler MPASSIGNMENTRowDeleting;
            
            public event MPASSIGNMENTRowChangeEventHandler MPASSIGNMENTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMPASSIGNMENTRow(MPASSIGNMENTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPASSIGNMENTRow AddMPASSIGNMENTRow(
                        string MPID, 
                        string ROADID, 
                        string SCHEMAID, 
                        string MPCODE, 
                        string MPNAME, 
                        decimal LONGITUDE, 
                        decimal LATITUDE, 
                        string MEMO, 
                        System.DateTime CREATED, 
                        string CREATEDBY, 
                        System.DateTime MODIFIED, 
                        string MODIFIEDBY, 
                        string ORGANIZATIONID, 
                        string SUITEID, 
                        string ISVOID, 
                        decimal MPLEVEL, 
                        decimal FLOATDIST, 
                        string IMPORTANCE, 
                        string EVENTID, 
                        decimal LATESTQCLEVEL, 
                        string ISSTART, 
                        string ISEND, 
                        decimal ORDERINROAD, 
                        string MPTYPE) {
                MPASSIGNMENTRow rowMPASSIGNMENTRow = ((MPASSIGNMENTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MPID,
                        ROADID,
                        SCHEMAID,
                        MPCODE,
                        MPNAME,
                        LONGITUDE,
                        LATITUDE,
                        MEMO,
                        CREATED,
                        CREATEDBY,
                        MODIFIED,
                        MODIFIEDBY,
                        ORGANIZATIONID,
                        SUITEID,
                        ISVOID,
                        MPLEVEL,
                        FLOATDIST,
                        IMPORTANCE,
                        EVENTID,
                        LATESTQCLEVEL,
                        ISSTART,
                        ISEND,
                        ORDERINROAD,
                        MPTYPE};
                rowMPASSIGNMENTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMPASSIGNMENTRow);
                return rowMPASSIGNMENTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPASSIGNMENTRow FindByMPID(string MPID) {
                return ((MPASSIGNMENTRow)(this.Rows.Find(new object[] {
                            MPID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MPASSIGNMENTDataTable cln = ((MPASSIGNMENTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MPASSIGNMENTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMPID = base.Columns["MPID"];
                this.columnROADID = base.Columns["ROADID"];
                this.columnSCHEMAID = base.Columns["SCHEMAID"];
                this.columnMPCODE = base.Columns["MPCODE"];
                this.columnMPNAME = base.Columns["MPNAME"];
                this.columnLONGITUDE = base.Columns["LONGITUDE"];
                this.columnLATITUDE = base.Columns["LATITUDE"];
                this.columnMEMO = base.Columns["MEMO"];
                this.columnCREATED = base.Columns["CREATED"];
                this.columnCREATEDBY = base.Columns["CREATEDBY"];
                this.columnMODIFIED = base.Columns["MODIFIED"];
                this.columnMODIFIEDBY = base.Columns["MODIFIEDBY"];
                this.columnORGANIZATIONID = base.Columns["ORGANIZATIONID"];
                this.columnSUITEID = base.Columns["SUITEID"];
                this.columnISVOID = base.Columns["ISVOID"];
                this.columnMPLEVEL = base.Columns["MPLEVEL"];
                this.columnFLOATDIST = base.Columns["FLOATDIST"];
                this.columnIMPORTANCE = base.Columns["IMPORTANCE"];
                this.columnEVENTID = base.Columns["EVENTID"];
                this.columnLATESTQCLEVEL = base.Columns["LATESTQCLEVEL"];
                this.columnISSTART = base.Columns["ISSTART"];
                this.columnISEND = base.Columns["ISEND"];
                this.columnORDERINROAD = base.Columns["ORDERINROAD"];
                this.columnMPTYPE = base.Columns["MPTYPE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMPID = new global::System.Data.DataColumn("MPID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPID);
                this.columnROADID = new global::System.Data.DataColumn("ROADID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROADID);
                this.columnSCHEMAID = new global::System.Data.DataColumn("SCHEMAID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCHEMAID);
                this.columnMPCODE = new global::System.Data.DataColumn("MPCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPCODE);
                this.columnMPNAME = new global::System.Data.DataColumn("MPNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPNAME);
                this.columnLONGITUDE = new global::System.Data.DataColumn("LONGITUDE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLONGITUDE);
                this.columnLATITUDE = new global::System.Data.DataColumn("LATITUDE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLATITUDE);
                this.columnMEMO = new global::System.Data.DataColumn("MEMO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEMO);
                this.columnCREATED = new global::System.Data.DataColumn("CREATED", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATED);
                this.columnCREATEDBY = new global::System.Data.DataColumn("CREATEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATEDBY);
                this.columnMODIFIED = new global::System.Data.DataColumn("MODIFIED", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODIFIED);
                this.columnMODIFIEDBY = new global::System.Data.DataColumn("MODIFIEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODIFIEDBY);
                this.columnORGANIZATIONID = new global::System.Data.DataColumn("ORGANIZATIONID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANIZATIONID);
                this.columnSUITEID = new global::System.Data.DataColumn("SUITEID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUITEID);
                this.columnISVOID = new global::System.Data.DataColumn("ISVOID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISVOID);
                this.columnMPLEVEL = new global::System.Data.DataColumn("MPLEVEL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPLEVEL);
                this.columnFLOATDIST = new global::System.Data.DataColumn("FLOATDIST", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFLOATDIST);
                this.columnIMPORTANCE = new global::System.Data.DataColumn("IMPORTANCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMPORTANCE);
                this.columnEVENTID = new global::System.Data.DataColumn("EVENTID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEVENTID);
                this.columnLATESTQCLEVEL = new global::System.Data.DataColumn("LATESTQCLEVEL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLATESTQCLEVEL);
                this.columnISSTART = new global::System.Data.DataColumn("ISSTART", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISSTART);
                this.columnISEND = new global::System.Data.DataColumn("ISEND", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISEND);
                this.columnORDERINROAD = new global::System.Data.DataColumn("ORDERINROAD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERINROAD);
                this.columnMPTYPE = new global::System.Data.DataColumn("MPTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMPTYPE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMPID}, true));
                this.columnMPID.AllowDBNull = false;
                this.columnMPID.Unique = true;
                this.columnMPID.MaxLength = 40;
                this.columnROADID.MaxLength = 40;
                this.columnSCHEMAID.MaxLength = 40;
                this.columnMPCODE.MaxLength = 40;
                this.columnMPNAME.MaxLength = 200;
                this.columnMEMO.MaxLength = 2000;
                this.columnCREATED.AllowDBNull = false;
                this.columnCREATEDBY.MaxLength = 40;
                this.columnMODIFIED.AllowDBNull = false;
                this.columnMODIFIEDBY.MaxLength = 40;
                this.columnORGANIZATIONID.MaxLength = 40;
                this.columnSUITEID.MaxLength = 40;
                this.columnISVOID.AllowDBNull = false;
                this.columnISVOID.MaxLength = 1;
                this.columnIMPORTANCE.AllowDBNull = false;
                this.columnIMPORTANCE.MaxLength = 40;
                this.columnEVENTID.MaxLength = 40;
                this.columnLATESTQCLEVEL.AllowDBNull = false;
                this.columnISSTART.AllowDBNull = false;
                this.columnISSTART.MaxLength = 1;
                this.columnISEND.AllowDBNull = false;
                this.columnISEND.MaxLength = 1;
                this.columnORDERINROAD.AllowDBNull = false;
                this.columnMPTYPE.MaxLength = 40;
                this.ExtendedProperties.Add("Generator_TablePropName", "_MPASSIGNMENT");
                this.ExtendedProperties.Add("Generator_UserTableName", "MPASSIGNMENT");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPASSIGNMENTRow NewMPASSIGNMENTRow() {
                return ((MPASSIGNMENTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MPASSIGNMENTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MPASSIGNMENTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MPASSIGNMENTRowChanged != null)) {
                    this.MPASSIGNMENTRowChanged(this, new MPASSIGNMENTRowChangeEvent(((MPASSIGNMENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MPASSIGNMENTRowChanging != null)) {
                    this.MPASSIGNMENTRowChanging(this, new MPASSIGNMENTRowChangeEvent(((MPASSIGNMENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MPASSIGNMENTRowDeleted != null)) {
                    this.MPASSIGNMENTRowDeleted(this, new MPASSIGNMENTRowChangeEvent(((MPASSIGNMENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MPASSIGNMENTRowDeleting != null)) {
                    this.MPASSIGNMENTRowDeleting(this, new MPASSIGNMENTRowChangeEvent(((MPASSIGNMENTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMPASSIGNMENTRow(MPASSIGNMENTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MPASSIGNMENT ds = new MPASSIGNMENT();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MPASSIGNMENTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MPASSIGNMENTRow : global::System.Data.DataRow {
            
            private MPASSIGNMENTDataTable tableMPASSIGNMENT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MPASSIGNMENTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMPASSIGNMENT = ((MPASSIGNMENTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPID {
                get {
                    return ((string)(this[this.tableMPASSIGNMENT.MPIDColumn]));
                }
                set {
                    this[this.tableMPASSIGNMENT.MPIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROADID {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.ROADIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“ROADID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.ROADIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCHEMAID {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.SCHEMAIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“SCHEMAID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.SCHEMAIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPCODE {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.MPCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“MPCODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.MPCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPNAME {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.MPNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“MPNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.MPNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LONGITUDE {
                get {
                    try {
                        return ((decimal)(this[this.tableMPASSIGNMENT.LONGITUDEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“LONGITUDE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.LONGITUDEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LATITUDE {
                get {
                    try {
                        return ((decimal)(this[this.tableMPASSIGNMENT.LATITUDEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“LATITUDE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.LATITUDEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MEMO {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.MEMOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“MEMO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.MEMOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATED {
                get {
                    return ((global::System.DateTime)(this[this.tableMPASSIGNMENT.CREATEDColumn]));
                }
                set {
                    this[this.tableMPASSIGNMENT.CREATEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATEDBY {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.CREATEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“CREATEDBY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.CREATEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MODIFIED {
                get {
                    return ((global::System.DateTime)(this[this.tableMPASSIGNMENT.MODIFIEDColumn]));
                }
                set {
                    this[this.tableMPASSIGNMENT.MODIFIEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODIFIEDBY {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.MODIFIEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“MODIFIEDBY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.MODIFIEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANIZATIONID {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.ORGANIZATIONIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“ORGANIZATIONID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.ORGANIZATIONIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUITEID {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.SUITEIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“SUITEID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.SUITEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISVOID {
                get {
                    return ((string)(this[this.tableMPASSIGNMENT.ISVOIDColumn]));
                }
                set {
                    this[this.tableMPASSIGNMENT.ISVOIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MPLEVEL {
                get {
                    try {
                        return ((decimal)(this[this.tableMPASSIGNMENT.MPLEVELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“MPLEVEL”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.MPLEVELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FLOATDIST {
                get {
                    try {
                        return ((decimal)(this[this.tableMPASSIGNMENT.FLOATDISTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“FLOATDIST”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.FLOATDISTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IMPORTANCE {
                get {
                    return ((string)(this[this.tableMPASSIGNMENT.IMPORTANCEColumn]));
                }
                set {
                    this[this.tableMPASSIGNMENT.IMPORTANCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EVENTID {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.EVENTIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“EVENTID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.EVENTIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LATESTQCLEVEL {
                get {
                    return ((decimal)(this[this.tableMPASSIGNMENT.LATESTQCLEVELColumn]));
                }
                set {
                    this[this.tableMPASSIGNMENT.LATESTQCLEVELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISSTART {
                get {
                    return ((string)(this[this.tableMPASSIGNMENT.ISSTARTColumn]));
                }
                set {
                    this[this.tableMPASSIGNMENT.ISSTARTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISEND {
                get {
                    return ((string)(this[this.tableMPASSIGNMENT.ISENDColumn]));
                }
                set {
                    this[this.tableMPASSIGNMENT.ISENDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ORDERINROAD {
                get {
                    return ((decimal)(this[this.tableMPASSIGNMENT.ORDERINROADColumn]));
                }
                set {
                    this[this.tableMPASSIGNMENT.ORDERINROADColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MPTYPE {
                get {
                    try {
                        return ((string)(this[this.tableMPASSIGNMENT.MPTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MPASSIGNMENT”中列“MPTYPE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMPASSIGNMENT.MPTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROADIDNull() {
                return this.IsNull(this.tableMPASSIGNMENT.ROADIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROADIDNull() {
                this[this.tableMPASSIGNMENT.ROADIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCHEMAIDNull() {
                return this.IsNull(this.tableMPASSIGNMENT.SCHEMAIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCHEMAIDNull() {
                this[this.tableMPASSIGNMENT.SCHEMAIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPCODENull() {
                return this.IsNull(this.tableMPASSIGNMENT.MPCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPCODENull() {
                this[this.tableMPASSIGNMENT.MPCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPNAMENull() {
                return this.IsNull(this.tableMPASSIGNMENT.MPNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPNAMENull() {
                this[this.tableMPASSIGNMENT.MPNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLONGITUDENull() {
                return this.IsNull(this.tableMPASSIGNMENT.LONGITUDEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLONGITUDENull() {
                this[this.tableMPASSIGNMENT.LONGITUDEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLATITUDENull() {
                return this.IsNull(this.tableMPASSIGNMENT.LATITUDEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLATITUDENull() {
                this[this.tableMPASSIGNMENT.LATITUDEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEMONull() {
                return this.IsNull(this.tableMPASSIGNMENT.MEMOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEMONull() {
                this[this.tableMPASSIGNMENT.MEMOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATEDBYNull() {
                return this.IsNull(this.tableMPASSIGNMENT.CREATEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATEDBYNull() {
                this[this.tableMPASSIGNMENT.CREATEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODIFIEDBYNull() {
                return this.IsNull(this.tableMPASSIGNMENT.MODIFIEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODIFIEDBYNull() {
                this[this.tableMPASSIGNMENT.MODIFIEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANIZATIONIDNull() {
                return this.IsNull(this.tableMPASSIGNMENT.ORGANIZATIONIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANIZATIONIDNull() {
                this[this.tableMPASSIGNMENT.ORGANIZATIONIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUITEIDNull() {
                return this.IsNull(this.tableMPASSIGNMENT.SUITEIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUITEIDNull() {
                this[this.tableMPASSIGNMENT.SUITEIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPLEVELNull() {
                return this.IsNull(this.tableMPASSIGNMENT.MPLEVELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPLEVELNull() {
                this[this.tableMPASSIGNMENT.MPLEVELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFLOATDISTNull() {
                return this.IsNull(this.tableMPASSIGNMENT.FLOATDISTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFLOATDISTNull() {
                this[this.tableMPASSIGNMENT.FLOATDISTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEVENTIDNull() {
                return this.IsNull(this.tableMPASSIGNMENT.EVENTIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEVENTIDNull() {
                this[this.tableMPASSIGNMENT.EVENTIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMPTYPENull() {
                return this.IsNull(this.tableMPASSIGNMENT.MPTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMPTYPENull() {
                this[this.tableMPASSIGNMENT.MPTYPEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MPASSIGNMENTRowChangeEvent : global::System.EventArgs {
            
            private MPASSIGNMENTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPASSIGNMENTRowChangeEvent(MPASSIGNMENTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MPASSIGNMENTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SQMS.Application.Config.Schema.MPASSIGNMENTTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MPASSIGNMENTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MPASSIGNMENTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MPASSIGNMENT";
            tableMapping.ColumnMappings.Add("MPID", "MPID");
            tableMapping.ColumnMappings.Add("ROADID", "ROADID");
            tableMapping.ColumnMappings.Add("SCHEMAID", "SCHEMAID");
            tableMapping.ColumnMappings.Add("MPCODE", "MPCODE");
            tableMapping.ColumnMappings.Add("MPNAME", "MPNAME");
            tableMapping.ColumnMappings.Add("LONGITUDE", "LONGITUDE");
            tableMapping.ColumnMappings.Add("LATITUDE", "LATITUDE");
            tableMapping.ColumnMappings.Add("MEMO", "MEMO");
            tableMapping.ColumnMappings.Add("CREATED", "CREATED");
            tableMapping.ColumnMappings.Add("CREATEDBY", "CREATEDBY");
            tableMapping.ColumnMappings.Add("MODIFIED", "MODIFIED");
            tableMapping.ColumnMappings.Add("MODIFIEDBY", "MODIFIEDBY");
            tableMapping.ColumnMappings.Add("ORGANIZATIONID", "ORGANIZATIONID");
            tableMapping.ColumnMappings.Add("SUITEID", "SUITEID");
            tableMapping.ColumnMappings.Add("ISVOID", "ISVOID");
            tableMapping.ColumnMappings.Add("MPLEVEL", "MPLEVEL");
            tableMapping.ColumnMappings.Add("FLOATDIST", "FLOATDIST");
            tableMapping.ColumnMappings.Add("IMPORTANCE", "IMPORTANCE");
            tableMapping.ColumnMappings.Add("EVENTID", "EVENTID");
            tableMapping.ColumnMappings.Add("LATESTQCLEVEL", "LATESTQCLEVEL");
            tableMapping.ColumnMappings.Add("ISSTART", "ISSTART");
            tableMapping.ColumnMappings.Add("ISEND", "ISEND");
            tableMapping.ColumnMappings.Add("ORDERINROAD", "ORDERINROAD");
            tableMapping.ColumnMappings.Add("MPTYPE", "MPTYPE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"SQMS_PRIVATE\".\"MPASSIGNMENT\" WHERE ((\"MPID\" = :Original_MPID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_MPID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MPID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""SQMS_PRIVATE"".""MPASSIGNMENT"" (""MPID"", ""ROADID"", ""SCHEMAID"", ""MPCODE"", ""MPNAME"", ""LONGITUDE"", ""LATITUDE"", ""MEMO"", ""CREATED"", ""CREATEDBY"", ""MODIFIED"", ""MODIFIEDBY"", ""ORGANIZATIONID"", ""SUITEID"", ""ISVOID"", ""MPLEVEL"", ""FLOATDIST"", ""IMPORTANCE"", ""EVENTID"", ""LATESTQCLEVEL"", ""ISSTART"", ""ISEND"", ""ORDERINROAD"", ""MPTYPE"") VALUES (:MPID, :ROADID, :SCHEMAID, :MPCODE, :MPNAME, :LONGITUDE, :LATITUDE, :MEMO, :CREATED, :CREATEDBY, :MODIFIED, :MODIFIEDBY, :ORGANIZATIONID, :SUITEID, :ISVOID, :MPLEVEL, :FLOATDIST, :IMPORTANCE, :EVENTID, :LATESTQCLEVEL, :ISSTART, :ISEND, :ORDERINROAD, :MPTYPE)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MPID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MPID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ROADID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ROADID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SCHEMAID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SCHEMAID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MPCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MPCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MPNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MPNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LONGITUDE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "LONGITUDE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LATITUDE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "LATITUDE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MEMO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MEMO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "CREATED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CREATEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "MODIFIED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODIFIEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGANIZATIONID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGANIZATIONID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SUITEID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SUITEID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISVOID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ISVOID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MPLEVEL", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MPLEVEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLOATDIST", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "FLOATDIST", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IMPORTANCE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "IMPORTANCE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EVENTID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EVENTID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LATESTQCLEVEL", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "LATESTQCLEVEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISSTART", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISSTART", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISEND", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISEND", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORDERINROAD", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "ORDERINROAD", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MPTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MPTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""SQMS_PRIVATE"".""MPASSIGNMENT"" SET ""MPID"" = :MPID, ""ROADID"" = :ROADID, ""SCHEMAID"" = :SCHEMAID, ""MPCODE"" = :MPCODE, ""MPNAME"" = :MPNAME, ""LONGITUDE"" = :LONGITUDE, ""LATITUDE"" = :LATITUDE, ""MEMO"" = :MEMO, ""CREATED"" = :CREATED, ""CREATEDBY"" = :CREATEDBY, ""MODIFIED"" = :MODIFIED, ""MODIFIEDBY"" = :MODIFIEDBY, ""ORGANIZATIONID"" = :ORGANIZATIONID, ""SUITEID"" = :SUITEID, ""ISVOID"" = :ISVOID, ""MPLEVEL"" = :MPLEVEL, ""FLOATDIST"" = :FLOATDIST, ""IMPORTANCE"" = :IMPORTANCE, ""EVENTID"" = :EVENTID, ""LATESTQCLEVEL"" = :LATESTQCLEVEL, ""ISSTART"" = :ISSTART, ""ISEND"" = :ISEND, ""ORDERINROAD"" = :ORDERINROAD, ""MPTYPE"" = :MPTYPE WHERE ((""MPID"" = :Original_MPID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MPID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MPID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ROADID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ROADID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SCHEMAID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SCHEMAID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MPCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MPCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MPNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MPNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LONGITUDE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "LONGITUDE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LATITUDE", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "LATITUDE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MEMO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MEMO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "CREATED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CREATEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "MODIFIED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODIFIEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGANIZATIONID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGANIZATIONID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SUITEID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SUITEID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISVOID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ISVOID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MPLEVEL", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "MPLEVEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("FLOATDIST", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "FLOATDIST", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("IMPORTANCE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "IMPORTANCE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EVENTID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EVENTID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("LATESTQCLEVEL", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "LATESTQCLEVEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISSTART", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISSTART", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISEND", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISEND", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORDERINROAD", global::System.Data.OracleClient.OracleType.Number, 0, global::System.Data.ParameterDirection.Input, "ORDERINROAD", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MPTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MPTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_MPID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MPID", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString2"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT MPID, ROADID, SCHEMAID, MPCODE, MPNAME, LONGITUDE, LATITUDE, MEMO, CREATED, CREATEDBY, MODIFIED, MODIFIEDBY, ORGANIZATIONID, SUITEID, ISVOID, MPLEVEL, FLOATDIST, IMPORTANCE, EVENTID, LATESTQCLEVEL, ISSTART, ISEND, ORDERINROAD, MPTYPE FROM SQMS_PRIVATE.MPASSIGNMENT";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MPASSIGNMENT.MPASSIGNMENTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MPASSIGNMENT.MPASSIGNMENTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MPASSIGNMENT.MPASSIGNMENTDataTable dataTable = new MPASSIGNMENT.MPASSIGNMENTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MPASSIGNMENT.MPASSIGNMENTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MPASSIGNMENT dataSet) {
            return this.Adapter.Update(dataSet, "MPASSIGNMENT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_MPID) {
            if ((Original_MPID == null)) {
                throw new global::System.ArgumentNullException("Original_MPID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_MPID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string MPID, 
                    string ROADID, 
                    string SCHEMAID, 
                    string MPCODE, 
                    string MPNAME, 
                    global::System.Nullable<decimal> LONGITUDE, 
                    global::System.Nullable<decimal> LATITUDE, 
                    string MEMO, 
                    System.DateTime CREATED, 
                    string CREATEDBY, 
                    System.DateTime MODIFIED, 
                    string MODIFIEDBY, 
                    string ORGANIZATIONID, 
                    string SUITEID, 
                    string ISVOID, 
                    global::System.Nullable<decimal> MPLEVEL, 
                    global::System.Nullable<decimal> FLOATDIST, 
                    string IMPORTANCE, 
                    string EVENTID, 
                    decimal LATESTQCLEVEL, 
                    string ISSTART, 
                    string ISEND, 
                    decimal ORDERINROAD, 
                    string MPTYPE) {
            if ((MPID == null)) {
                throw new global::System.ArgumentNullException("MPID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MPID));
            }
            if ((ROADID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ROADID));
            }
            if ((SCHEMAID == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SCHEMAID));
            }
            if ((MPCODE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(MPCODE));
            }
            if ((MPNAME == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(MPNAME));
            }
            if ((LONGITUDE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(LONGITUDE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((LATITUDE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(LATITUDE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((MEMO == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(MEMO));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(CREATED));
            if ((CREATEDBY == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(CREATEDBY));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(MODIFIED));
            if ((MODIFIEDBY == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(MODIFIEDBY));
            }
            if ((ORGANIZATIONID == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(ORGANIZATIONID));
            }
            if ((SUITEID == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(SUITEID));
            }
            if ((ISVOID == null)) {
                throw new global::System.ArgumentNullException("ISVOID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(ISVOID));
            }
            if ((MPLEVEL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(MPLEVEL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((FLOATDIST.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(FLOATDIST.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((IMPORTANCE == null)) {
                throw new global::System.ArgumentNullException("IMPORTANCE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(IMPORTANCE));
            }
            if ((EVENTID == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(EVENTID));
            }
            this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(LATESTQCLEVEL));
            if ((ISSTART == null)) {
                throw new global::System.ArgumentNullException("ISSTART");
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(ISSTART));
            }
            if ((ISEND == null)) {
                throw new global::System.ArgumentNullException("ISEND");
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(ISEND));
            }
            this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(ORDERINROAD));
            if ((MPTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(MPTYPE));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string MPID, 
                    string ROADID, 
                    string SCHEMAID, 
                    string MPCODE, 
                    string MPNAME, 
                    global::System.Nullable<decimal> LONGITUDE, 
                    global::System.Nullable<decimal> LATITUDE, 
                    string MEMO, 
                    System.DateTime CREATED, 
                    string CREATEDBY, 
                    System.DateTime MODIFIED, 
                    string MODIFIEDBY, 
                    string ORGANIZATIONID, 
                    string SUITEID, 
                    string ISVOID, 
                    global::System.Nullable<decimal> MPLEVEL, 
                    global::System.Nullable<decimal> FLOATDIST, 
                    string IMPORTANCE, 
                    string EVENTID, 
                    decimal LATESTQCLEVEL, 
                    string ISSTART, 
                    string ISEND, 
                    decimal ORDERINROAD, 
                    string MPTYPE, 
                    string Original_MPID) {
            if ((MPID == null)) {
                throw new global::System.ArgumentNullException("MPID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MPID));
            }
            if ((ROADID == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ROADID));
            }
            if ((SCHEMAID == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SCHEMAID));
            }
            if ((MPCODE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(MPCODE));
            }
            if ((MPNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(MPNAME));
            }
            if ((LONGITUDE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(LONGITUDE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((LATITUDE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(LATITUDE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((MEMO == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(MEMO));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(CREATED));
            if ((CREATEDBY == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(CREATEDBY));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(MODIFIED));
            if ((MODIFIEDBY == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(MODIFIEDBY));
            }
            if ((ORGANIZATIONID == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(ORGANIZATIONID));
            }
            if ((SUITEID == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(SUITEID));
            }
            if ((ISVOID == null)) {
                throw new global::System.ArgumentNullException("ISVOID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(ISVOID));
            }
            if ((MPLEVEL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(MPLEVEL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((FLOATDIST.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(FLOATDIST.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((IMPORTANCE == null)) {
                throw new global::System.ArgumentNullException("IMPORTANCE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(IMPORTANCE));
            }
            if ((EVENTID == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(EVENTID));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(LATESTQCLEVEL));
            if ((ISSTART == null)) {
                throw new global::System.ArgumentNullException("ISSTART");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(ISSTART));
            }
            if ((ISEND == null)) {
                throw new global::System.ArgumentNullException("ISEND");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(ISEND));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(ORDERINROAD));
            if ((MPTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(MPTYPE));
            }
            if ((Original_MPID == null)) {
                throw new global::System.ArgumentNullException("Original_MPID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_MPID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ROADID, 
                    string SCHEMAID, 
                    string MPCODE, 
                    string MPNAME, 
                    global::System.Nullable<decimal> LONGITUDE, 
                    global::System.Nullable<decimal> LATITUDE, 
                    string MEMO, 
                    System.DateTime CREATED, 
                    string CREATEDBY, 
                    System.DateTime MODIFIED, 
                    string MODIFIEDBY, 
                    string ORGANIZATIONID, 
                    string SUITEID, 
                    string ISVOID, 
                    global::System.Nullable<decimal> MPLEVEL, 
                    global::System.Nullable<decimal> FLOATDIST, 
                    string IMPORTANCE, 
                    string EVENTID, 
                    decimal LATESTQCLEVEL, 
                    string ISSTART, 
                    string ISEND, 
                    decimal ORDERINROAD, 
                    string MPTYPE, 
                    string Original_MPID) {
            return this.Update(Original_MPID, ROADID, SCHEMAID, MPCODE, MPNAME, LONGITUDE, LATITUDE, MEMO, CREATED, CREATEDBY, MODIFIED, MODIFIEDBY, ORGANIZATIONID, SUITEID, ISVOID, MPLEVEL, FLOATDIST, IMPORTANCE, EVENTID, LATESTQCLEVEL, ISSTART, ISEND, ORDERINROAD, MPTYPE, Original_MPID);
        }
    }
}

#pragma warning restore 1591