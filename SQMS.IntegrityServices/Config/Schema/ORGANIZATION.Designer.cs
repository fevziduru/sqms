//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SQMS.IntegrityServices.Config.Schema {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ORGANIZATION")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ORGANIZATION : global::System.Data.DataSet {
        
        private ORGANIZATIONDataTable tableORGANIZATION;
        
        private global::System.Data.DataRelation relationFK_ORGANIZA_RELPARENT_ORGANIZA;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ORGANIZATION() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ORGANIZATION(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ORGANIZATION"] != null)) {
                    base.Tables.Add(new ORGANIZATIONDataTable(ds.Tables["ORGANIZATION"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ORGANIZATIONDataTable _ORGANIZATION {
            get {
                return this.tableORGANIZATION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ORGANIZATION cln = ((ORGANIZATION)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ORGANIZATION"] != null)) {
                    base.Tables.Add(new ORGANIZATIONDataTable(ds.Tables["ORGANIZATION"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableORGANIZATION = ((ORGANIZATIONDataTable)(base.Tables["ORGANIZATION"]));
            if ((initTable == true)) {
                if ((this.tableORGANIZATION != null)) {
                    this.tableORGANIZATION.InitVars();
                }
            }
            this.relationFK_ORGANIZA_RELPARENT_ORGANIZA = this.Relations["FK_ORGANIZA_RELPARENT_ORGANIZA"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ORGANIZATION";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ORGANIZATION.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableORGANIZATION = new ORGANIZATIONDataTable();
            base.Tables.Add(this.tableORGANIZATION);
            this.relationFK_ORGANIZA_RELPARENT_ORGANIZA = new global::System.Data.DataRelation("FK_ORGANIZA_RELPARENT_ORGANIZA", new global::System.Data.DataColumn[] {
                        this.tableORGANIZATION.ORGIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableORGANIZATION.PARENTORGColumn}, false);
            this.Relations.Add(this.relationFK_ORGANIZA_RELPARENT_ORGANIZA);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_ORGANIZATION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ORGANIZATION ds = new ORGANIZATION();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ORGANIZATIONRowChangeEventHandler(object sender, ORGANIZATIONRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ORGANIZATIONDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnORGID;
            
            private global::System.Data.DataColumn columnCOUNTRY;
            
            private global::System.Data.DataColumn columnCITY;
            
            private global::System.Data.DataColumn columnPARENTORG;
            
            private global::System.Data.DataColumn columnPROVINCE;
            
            private global::System.Data.DataColumn columnORGCODE;
            
            private global::System.Data.DataColumn columnORGNAME;
            
            private global::System.Data.DataColumn columnORGTYPE;
            
            private global::System.Data.DataColumn columnORGALIAS;
            
            private global::System.Data.DataColumn columnORGSTATUS;
            
            private global::System.Data.DataColumn columnORGADDRESS;
            
            private global::System.Data.DataColumn columnZIPCODE;
            
            private global::System.Data.DataColumn columnCONTACT;
            
            private global::System.Data.DataColumn columnCONTACTTEL;
            
            private global::System.Data.DataColumn columnEMAIL;
            
            private global::System.Data.DataColumn columnMEMO;
            
            private global::System.Data.DataColumn columnCREATED;
            
            private global::System.Data.DataColumn columnCREATEDBY;
            
            private global::System.Data.DataColumn columnMODIFIEDBY;
            
            private global::System.Data.DataColumn columnISVOID;
            
            private global::System.Data.DataColumn columnSUITEID;
            
            private global::System.Data.DataColumn columnDATABASEID;
            
            private global::System.Data.DataColumn columnMODIFIED;
            
            private global::System.Data.DataColumn columnORGANIZATIONID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ORGANIZATIONDataTable() {
                this.TableName = "ORGANIZATION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ORGANIZATIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ORGANIZATIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGIDColumn {
                get {
                    return this.columnORGID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTRYColumn {
                get {
                    return this.columnCOUNTRY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CITYColumn {
                get {
                    return this.columnCITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARENTORGColumn {
                get {
                    return this.columnPARENTORG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROVINCEColumn {
                get {
                    return this.columnPROVINCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGCODEColumn {
                get {
                    return this.columnORGCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGNAMEColumn {
                get {
                    return this.columnORGNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGTYPEColumn {
                get {
                    return this.columnORGTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGALIASColumn {
                get {
                    return this.columnORGALIAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGSTATUSColumn {
                get {
                    return this.columnORGSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGADDRESSColumn {
                get {
                    return this.columnORGADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZIPCODEColumn {
                get {
                    return this.columnZIPCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACTColumn {
                get {
                    return this.columnCONTACT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTACTTELColumn {
                get {
                    return this.columnCONTACTTEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMAILColumn {
                get {
                    return this.columnEMAIL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEMOColumn {
                get {
                    return this.columnMEMO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATEDColumn {
                get {
                    return this.columnCREATED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATEDBYColumn {
                get {
                    return this.columnCREATEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODIFIEDBYColumn {
                get {
                    return this.columnMODIFIEDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISVOIDColumn {
                get {
                    return this.columnISVOID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUITEIDColumn {
                get {
                    return this.columnSUITEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATABASEIDColumn {
                get {
                    return this.columnDATABASEID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MODIFIEDColumn {
                get {
                    return this.columnMODIFIED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANIZATIONIDColumn {
                get {
                    return this.columnORGANIZATIONID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ORGANIZATIONRow this[int index] {
                get {
                    return ((ORGANIZATIONRow)(this.Rows[index]));
                }
            }
            
            public event ORGANIZATIONRowChangeEventHandler ORGANIZATIONRowChanging;
            
            public event ORGANIZATIONRowChangeEventHandler ORGANIZATIONRowChanged;
            
            public event ORGANIZATIONRowChangeEventHandler ORGANIZATIONRowDeleting;
            
            public event ORGANIZATIONRowChangeEventHandler ORGANIZATIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddORGANIZATIONRow(ORGANIZATIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ORGANIZATIONRow AddORGANIZATIONRow(
                        string ORGID, 
                        string COUNTRY, 
                        string CITY, 
                        ORGANIZATIONRow parentORGANIZATIONRowByFK_ORGANIZA_RELPARENT_ORGANIZA, 
                        string PROVINCE, 
                        string ORGCODE, 
                        string ORGNAME, 
                        string ORGTYPE, 
                        string ORGALIAS, 
                        string ORGSTATUS, 
                        string ORGADDRESS, 
                        string ZIPCODE, 
                        string CONTACT, 
                        string CONTACTTEL, 
                        string EMAIL, 
                        string MEMO, 
                        System.DateTime CREATED, 
                        string CREATEDBY, 
                        string MODIFIEDBY, 
                        string ISVOID, 
                        string SUITEID, 
                        string DATABASEID, 
                        System.DateTime MODIFIED, 
                        string ORGANIZATIONID) {
                ORGANIZATIONRow rowORGANIZATIONRow = ((ORGANIZATIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ORGID,
                        COUNTRY,
                        CITY,
                        null,
                        PROVINCE,
                        ORGCODE,
                        ORGNAME,
                        ORGTYPE,
                        ORGALIAS,
                        ORGSTATUS,
                        ORGADDRESS,
                        ZIPCODE,
                        CONTACT,
                        CONTACTTEL,
                        EMAIL,
                        MEMO,
                        CREATED,
                        CREATEDBY,
                        MODIFIEDBY,
                        ISVOID,
                        SUITEID,
                        DATABASEID,
                        MODIFIED,
                        ORGANIZATIONID};
                if ((parentORGANIZATIONRowByFK_ORGANIZA_RELPARENT_ORGANIZA != null)) {
                    columnValuesArray[3] = parentORGANIZATIONRowByFK_ORGANIZA_RELPARENT_ORGANIZA[0];
                }
                rowORGANIZATIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowORGANIZATIONRow);
                return rowORGANIZATIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ORGANIZATIONRow FindByORGID(string ORGID) {
                return ((ORGANIZATIONRow)(this.Rows.Find(new object[] {
                            ORGID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ORGANIZATIONDataTable cln = ((ORGANIZATIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ORGANIZATIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnORGID = base.Columns["ORGID"];
                this.columnCOUNTRY = base.Columns["COUNTRY"];
                this.columnCITY = base.Columns["CITY"];
                this.columnPARENTORG = base.Columns["PARENTORG"];
                this.columnPROVINCE = base.Columns["PROVINCE"];
                this.columnORGCODE = base.Columns["ORGCODE"];
                this.columnORGNAME = base.Columns["ORGNAME"];
                this.columnORGTYPE = base.Columns["ORGTYPE"];
                this.columnORGALIAS = base.Columns["ORGALIAS"];
                this.columnORGSTATUS = base.Columns["ORGSTATUS"];
                this.columnORGADDRESS = base.Columns["ORGADDRESS"];
                this.columnZIPCODE = base.Columns["ZIPCODE"];
                this.columnCONTACT = base.Columns["CONTACT"];
                this.columnCONTACTTEL = base.Columns["CONTACTTEL"];
                this.columnEMAIL = base.Columns["EMAIL"];
                this.columnMEMO = base.Columns["MEMO"];
                this.columnCREATED = base.Columns["CREATED"];
                this.columnCREATEDBY = base.Columns["CREATEDBY"];
                this.columnMODIFIEDBY = base.Columns["MODIFIEDBY"];
                this.columnISVOID = base.Columns["ISVOID"];
                this.columnSUITEID = base.Columns["SUITEID"];
                this.columnDATABASEID = base.Columns["DATABASEID"];
                this.columnMODIFIED = base.Columns["MODIFIED"];
                this.columnORGANIZATIONID = base.Columns["ORGANIZATIONID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnORGID = new global::System.Data.DataColumn("ORGID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGID);
                this.columnCOUNTRY = new global::System.Data.DataColumn("COUNTRY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTRY);
                this.columnCITY = new global::System.Data.DataColumn("CITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCITY);
                this.columnPARENTORG = new global::System.Data.DataColumn("PARENTORG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARENTORG);
                this.columnPROVINCE = new global::System.Data.DataColumn("PROVINCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROVINCE);
                this.columnORGCODE = new global::System.Data.DataColumn("ORGCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGCODE);
                this.columnORGNAME = new global::System.Data.DataColumn("ORGNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGNAME);
                this.columnORGTYPE = new global::System.Data.DataColumn("ORGTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGTYPE);
                this.columnORGALIAS = new global::System.Data.DataColumn("ORGALIAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGALIAS);
                this.columnORGSTATUS = new global::System.Data.DataColumn("ORGSTATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGSTATUS);
                this.columnORGADDRESS = new global::System.Data.DataColumn("ORGADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGADDRESS);
                this.columnZIPCODE = new global::System.Data.DataColumn("ZIPCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZIPCODE);
                this.columnCONTACT = new global::System.Data.DataColumn("CONTACT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACT);
                this.columnCONTACTTEL = new global::System.Data.DataColumn("CONTACTTEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTACTTEL);
                this.columnEMAIL = new global::System.Data.DataColumn("EMAIL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL);
                this.columnMEMO = new global::System.Data.DataColumn("MEMO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMEMO);
                this.columnCREATED = new global::System.Data.DataColumn("CREATED", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATED);
                this.columnCREATEDBY = new global::System.Data.DataColumn("CREATEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATEDBY);
                this.columnMODIFIEDBY = new global::System.Data.DataColumn("MODIFIEDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODIFIEDBY);
                this.columnISVOID = new global::System.Data.DataColumn("ISVOID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISVOID);
                this.columnSUITEID = new global::System.Data.DataColumn("SUITEID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUITEID);
                this.columnDATABASEID = new global::System.Data.DataColumn("DATABASEID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATABASEID);
                this.columnMODIFIED = new global::System.Data.DataColumn("MODIFIED", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODIFIED);
                this.columnORGANIZATIONID = new global::System.Data.DataColumn("ORGANIZATIONID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANIZATIONID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnORGID}, true));
                this.columnORGID.AllowDBNull = false;
                this.columnORGID.Unique = true;
                this.columnORGID.MaxLength = 40;
                this.columnCOUNTRY.MaxLength = 40;
                this.columnCITY.MaxLength = 40;
                this.columnPARENTORG.MaxLength = 40;
                this.columnPROVINCE.MaxLength = 40;
                this.columnORGCODE.AllowDBNull = false;
                this.columnORGCODE.MaxLength = 40;
                this.columnORGNAME.MaxLength = 60;
                this.columnORGTYPE.MaxLength = 60;
                this.columnORGALIAS.MaxLength = 60;
                this.columnORGSTATUS.MaxLength = 2000;
                this.columnORGADDRESS.MaxLength = 200;
                this.columnZIPCODE.MaxLength = 20;
                this.columnCONTACT.MaxLength = 20;
                this.columnCONTACTTEL.MaxLength = 20;
                this.columnEMAIL.MaxLength = 100;
                this.columnMEMO.MaxLength = 2000;
                this.columnCREATEDBY.MaxLength = 40;
                this.columnMODIFIEDBY.MaxLength = 40;
                this.columnISVOID.MaxLength = 1;
                this.columnSUITEID.MaxLength = 40;
                this.columnDATABASEID.MaxLength = 40;
                this.columnORGANIZATIONID.MaxLength = 40;
                this.ExtendedProperties.Add("Generator_TablePropName", "_ORGANIZATION");
                this.ExtendedProperties.Add("Generator_UserTableName", "ORGANIZATION");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ORGANIZATIONRow NewORGANIZATIONRow() {
                return ((ORGANIZATIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ORGANIZATIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ORGANIZATIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ORGANIZATIONRowChanged != null)) {
                    this.ORGANIZATIONRowChanged(this, new ORGANIZATIONRowChangeEvent(((ORGANIZATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ORGANIZATIONRowChanging != null)) {
                    this.ORGANIZATIONRowChanging(this, new ORGANIZATIONRowChangeEvent(((ORGANIZATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ORGANIZATIONRowDeleted != null)) {
                    this.ORGANIZATIONRowDeleted(this, new ORGANIZATIONRowChangeEvent(((ORGANIZATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ORGANIZATIONRowDeleting != null)) {
                    this.ORGANIZATIONRowDeleting(this, new ORGANIZATIONRowChangeEvent(((ORGANIZATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveORGANIZATIONRow(ORGANIZATIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ORGANIZATION ds = new ORGANIZATION();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ORGANIZATIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ORGANIZATIONRow : global::System.Data.DataRow {
            
            private ORGANIZATIONDataTable tableORGANIZATION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ORGANIZATIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableORGANIZATION = ((ORGANIZATIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGID {
                get {
                    return ((string)(this[this.tableORGANIZATION.ORGIDColumn]));
                }
                set {
                    this[this.tableORGANIZATION.ORGIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COUNTRY {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.COUNTRYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COUNTRY\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.COUNTRYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CITY {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.CITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CITY\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.CITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARENTORG {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.PARENTORGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARENTORG\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.PARENTORGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROVINCE {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.PROVINCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROVINCE\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.PROVINCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGCODE {
                get {
                    return ((string)(this[this.tableORGANIZATION.ORGCODEColumn]));
                }
                set {
                    this[this.tableORGANIZATION.ORGCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGNAME {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.ORGNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGNAME\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.ORGNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGTYPE {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.ORGTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGTYPE\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.ORGTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGALIAS {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.ORGALIASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGALIAS\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.ORGALIASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGSTATUS {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.ORGSTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGSTATUS\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.ORGSTATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGADDRESS {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.ORGADDRESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGADDRESS\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.ORGADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZIPCODE {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.ZIPCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZIPCODE\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.ZIPCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACT {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.CONTACTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONTACT\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.CONTACTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTACTTEL {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.CONTACTTELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONTACTTEL\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.CONTACTTELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.EMAILColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EMAIL\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.EMAILColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MEMO {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.MEMOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MEMO\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.MEMOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATED {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableORGANIZATION.CREATEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATED\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.CREATEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CREATEDBY {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.CREATEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATEDBY\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.CREATEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODIFIEDBY {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.MODIFIEDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MODIFIEDBY\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.MODIFIEDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISVOID {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.ISVOIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ISVOID\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.ISVOIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SUITEID {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.SUITEIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUITEID\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.SUITEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DATABASEID {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.DATABASEIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATABASEID\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.DATABASEIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MODIFIED {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableORGANIZATION.MODIFIEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MODIFIED\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.MODIFIEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANIZATIONID {
                get {
                    try {
                        return ((string)(this[this.tableORGANIZATION.ORGANIZATIONIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANIZATIONID\' in table \'ORGANIZATION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableORGANIZATION.ORGANIZATIONIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ORGANIZATIONRow ORGANIZATIONRowParent {
                get {
                    return ((ORGANIZATIONRow)(this.GetParentRow(this.Table.ParentRelations["FK_ORGANIZA_RELPARENT_ORGANIZA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ORGANIZA_RELPARENT_ORGANIZA"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTRYNull() {
                return this.IsNull(this.tableORGANIZATION.COUNTRYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTRYNull() {
                this[this.tableORGANIZATION.COUNTRYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCITYNull() {
                return this.IsNull(this.tableORGANIZATION.CITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCITYNull() {
                this[this.tableORGANIZATION.CITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARENTORGNull() {
                return this.IsNull(this.tableORGANIZATION.PARENTORGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARENTORGNull() {
                this[this.tableORGANIZATION.PARENTORGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROVINCENull() {
                return this.IsNull(this.tableORGANIZATION.PROVINCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROVINCENull() {
                this[this.tableORGANIZATION.PROVINCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGNAMENull() {
                return this.IsNull(this.tableORGANIZATION.ORGNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGNAMENull() {
                this[this.tableORGANIZATION.ORGNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGTYPENull() {
                return this.IsNull(this.tableORGANIZATION.ORGTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGTYPENull() {
                this[this.tableORGANIZATION.ORGTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGALIASNull() {
                return this.IsNull(this.tableORGANIZATION.ORGALIASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGALIASNull() {
                this[this.tableORGANIZATION.ORGALIASColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGSTATUSNull() {
                return this.IsNull(this.tableORGANIZATION.ORGSTATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGSTATUSNull() {
                this[this.tableORGANIZATION.ORGSTATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGADDRESSNull() {
                return this.IsNull(this.tableORGANIZATION.ORGADDRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGADDRESSNull() {
                this[this.tableORGANIZATION.ORGADDRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZIPCODENull() {
                return this.IsNull(this.tableORGANIZATION.ZIPCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZIPCODENull() {
                this[this.tableORGANIZATION.ZIPCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTACTNull() {
                return this.IsNull(this.tableORGANIZATION.CONTACTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTACTNull() {
                this[this.tableORGANIZATION.CONTACTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONTACTTELNull() {
                return this.IsNull(this.tableORGANIZATION.CONTACTTELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONTACTTELNull() {
                this[this.tableORGANIZATION.CONTACTTELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAILNull() {
                return this.IsNull(this.tableORGANIZATION.EMAILColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAILNull() {
                this[this.tableORGANIZATION.EMAILColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEMONull() {
                return this.IsNull(this.tableORGANIZATION.MEMOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEMONull() {
                this[this.tableORGANIZATION.MEMOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATEDNull() {
                return this.IsNull(this.tableORGANIZATION.CREATEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATEDNull() {
                this[this.tableORGANIZATION.CREATEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATEDBYNull() {
                return this.IsNull(this.tableORGANIZATION.CREATEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATEDBYNull() {
                this[this.tableORGANIZATION.CREATEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODIFIEDBYNull() {
                return this.IsNull(this.tableORGANIZATION.MODIFIEDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODIFIEDBYNull() {
                this[this.tableORGANIZATION.MODIFIEDBYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsISVOIDNull() {
                return this.IsNull(this.tableORGANIZATION.ISVOIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetISVOIDNull() {
                this[this.tableORGANIZATION.ISVOIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUITEIDNull() {
                return this.IsNull(this.tableORGANIZATION.SUITEIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUITEIDNull() {
                this[this.tableORGANIZATION.SUITEIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATABASEIDNull() {
                return this.IsNull(this.tableORGANIZATION.DATABASEIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATABASEIDNull() {
                this[this.tableORGANIZATION.DATABASEIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODIFIEDNull() {
                return this.IsNull(this.tableORGANIZATION.MODIFIEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODIFIEDNull() {
                this[this.tableORGANIZATION.MODIFIEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANIZATIONIDNull() {
                return this.IsNull(this.tableORGANIZATION.ORGANIZATIONIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANIZATIONIDNull() {
                this[this.tableORGANIZATION.ORGANIZATIONIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ORGANIZATIONRow[] GetORGANIZATIONRows() {
                if ((this.Table.ChildRelations["FK_ORGANIZA_RELPARENT_ORGANIZA"] == null)) {
                    return new ORGANIZATIONRow[0];
                }
                else {
                    return ((ORGANIZATIONRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ORGANIZA_RELPARENT_ORGANIZA"])));
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ORGANIZATIONRowChangeEvent : global::System.EventArgs {
            
            private ORGANIZATIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ORGANIZATIONRowChangeEvent(ORGANIZATIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ORGANIZATIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SQMS.IntegrityServices.Config.Schema.ORGANIZATIONTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ORGANIZATIONTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private global::System.Data.OracleClient.OracleConnection _connection;
        
        private global::System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ORGANIZATIONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OracleClient.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ORGANIZATION";
            tableMapping.ColumnMappings.Add("ORGID", "ORGID");
            tableMapping.ColumnMappings.Add("COUNTRY", "COUNTRY");
            tableMapping.ColumnMappings.Add("CITY", "CITY");
            tableMapping.ColumnMappings.Add("PARENTORG", "PARENTORG");
            tableMapping.ColumnMappings.Add("PROVINCE", "PROVINCE");
            tableMapping.ColumnMappings.Add("ORGCODE", "ORGCODE");
            tableMapping.ColumnMappings.Add("ORGNAME", "ORGNAME");
            tableMapping.ColumnMappings.Add("ORGTYPE", "ORGTYPE");
            tableMapping.ColumnMappings.Add("ORGALIAS", "ORGALIAS");
            tableMapping.ColumnMappings.Add("ORGSTATUS", "ORGSTATUS");
            tableMapping.ColumnMappings.Add("ORGADDRESS", "ORGADDRESS");
            tableMapping.ColumnMappings.Add("ZIPCODE", "ZIPCODE");
            tableMapping.ColumnMappings.Add("CONTACT", "CONTACT");
            tableMapping.ColumnMappings.Add("CONTACTTEL", "CONTACTTEL");
            tableMapping.ColumnMappings.Add("EMAIL", "EMAIL");
            tableMapping.ColumnMappings.Add("MEMO", "MEMO");
            tableMapping.ColumnMappings.Add("CREATED", "CREATED");
            tableMapping.ColumnMappings.Add("CREATEDBY", "CREATEDBY");
            tableMapping.ColumnMappings.Add("MODIFIEDBY", "MODIFIEDBY");
            tableMapping.ColumnMappings.Add("ISVOID", "ISVOID");
            tableMapping.ColumnMappings.Add("SUITEID", "SUITEID");
            tableMapping.ColumnMappings.Add("DATABASEID", "DATABASEID");
            tableMapping.ColumnMappings.Add("MODIFIED", "MODIFIED");
            tableMapping.ColumnMappings.Add("ORGANIZATIONID", "ORGANIZATIONID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"SQMS_PRIVATE_0814\".\"ORGANIZATION\" WHERE ((\"ORGID\" = :Original_ORGID)" +
                ")";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_ORGID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""SQMS_PRIVATE_0814"".""ORGANIZATION"" (""ORGID"", ""COUNTRY"", ""CITY"", ""PARENTORG"", ""PROVINCE"", ""ORGCODE"", ""ORGNAME"", ""ORGTYPE"", ""ORGALIAS"", ""ORGSTATUS"", ""ORGADDRESS"", ""ZIPCODE"", ""CONTACT"", ""CONTACTTEL"", ""EMAIL"", ""MEMO"", ""CREATED"", ""CREATEDBY"", ""MODIFIEDBY"", ""ISVOID"", ""SUITEID"", ""DATABASEID"", ""MODIFIED"", ""ORGANIZATIONID"") VALUES (:ORGID, :COUNTRY, :CITY, :PARENTORG, :PROVINCE, :ORGCODE, :ORGNAME, :ORGTYPE, :ORGALIAS, :ORGSTATUS, :ORGADDRESS, :ZIPCODE, :CONTACT, :CONTACTTEL, :EMAIL, :MEMO, :CREATED, :CREATEDBY, :MODIFIEDBY, :ISVOID, :SUITEID, :DATABASEID, :MODIFIED, :ORGANIZATIONID)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("COUNTRY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COUNTRY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CITY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CITY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PARENTORG", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PARENTORG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PROVINCE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PROVINCE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGALIAS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGALIAS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGSTATUS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGSTATUS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGADDRESS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGADDRESS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ZIPCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ZIPCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONTACT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONTACT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONTACTTEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONTACTTEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EMAIL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EMAIL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MEMO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MEMO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "CREATED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CREATEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODIFIEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISVOID", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISVOID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SUITEID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SUITEID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DATABASEID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "DATABASEID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "MODIFIED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGANIZATIONID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGANIZATIONID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""SQMS_PRIVATE_0814"".""ORGANIZATION"" SET ""ORGID"" = :ORGID, ""COUNTRY"" = :COUNTRY, ""CITY"" = :CITY, ""PARENTORG"" = :PARENTORG, ""PROVINCE"" = :PROVINCE, ""ORGCODE"" = :ORGCODE, ""ORGNAME"" = :ORGNAME, ""ORGTYPE"" = :ORGTYPE, ""ORGALIAS"" = :ORGALIAS, ""ORGSTATUS"" = :ORGSTATUS, ""ORGADDRESS"" = :ORGADDRESS, ""ZIPCODE"" = :ZIPCODE, ""CONTACT"" = :CONTACT, ""CONTACTTEL"" = :CONTACTTEL, ""EMAIL"" = :EMAIL, ""MEMO"" = :MEMO, ""CREATED"" = :CREATED, ""CREATEDBY"" = :CREATEDBY, ""MODIFIEDBY"" = :MODIFIEDBY, ""ISVOID"" = :ISVOID, ""SUITEID"" = :SUITEID, ""DATABASEID"" = :DATABASEID, ""MODIFIED"" = :MODIFIED, ""ORGANIZATIONID"" = :ORGANIZATIONID WHERE ((""ORGID"" = :Original_ORGID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("COUNTRY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "COUNTRY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CITY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CITY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PARENTORG", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PARENTORG", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("PROVINCE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "PROVINCE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGNAME", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGNAME", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGTYPE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGTYPE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGALIAS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGALIAS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGSTATUS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGSTATUS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGADDRESS", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGADDRESS", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ZIPCODE", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ZIPCODE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONTACT", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONTACT", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CONTACTTEL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CONTACTTEL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("EMAIL", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "EMAIL", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MEMO", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MEMO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "CREATED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("CREATEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "CREATEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIEDBY", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "MODIFIEDBY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ISVOID", global::System.Data.OracleClient.OracleType.Char, 0, global::System.Data.ParameterDirection.Input, "ISVOID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("SUITEID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "SUITEID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("DATABASEID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "DATABASEID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("MODIFIED", global::System.Data.OracleClient.OracleType.DateTime, 0, global::System.Data.ParameterDirection.Input, "MODIFIED", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("ORGANIZATIONID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGANIZATIONID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OracleClient.OracleParameter("Original_ORGID", global::System.Data.OracleClient.OracleType.VarChar, 0, global::System.Data.ParameterDirection.Input, "ORGID", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionString1"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new global::System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ORGID, COUNTRY, CITY, PARENTORG, PROVINCE, ORGCODE, ORGNAME, ORGTYPE, ORGALIAS, ORGSTATUS, ORGADDRESS, ZIPCODE, CONTACT, CONTACTTEL, EMAIL, MEMO, CREATED, CREATEDBY, MODIFIEDBY, ISVOID, SUITEID, DATABASEID, MODIFIED, ORGANIZATIONID FROM SQMS_PRIVATE_0814.""ORGANIZATION""";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ORGANIZATION.ORGANIZATIONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ORGANIZATION.ORGANIZATIONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ORGANIZATION.ORGANIZATIONDataTable dataTable = new ORGANIZATION.ORGANIZATIONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ORGANIZATION.ORGANIZATIONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ORGANIZATION dataSet) {
            return this.Adapter.Update(dataSet, "ORGANIZATION");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_ORGID) {
            if ((Original_ORGID == null)) {
                throw new global::System.ArgumentNullException("Original_ORGID");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_ORGID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string ORGID, 
                    string COUNTRY, 
                    string CITY, 
                    string PARENTORG, 
                    string PROVINCE, 
                    string ORGCODE, 
                    string ORGNAME, 
                    string ORGTYPE, 
                    string ORGALIAS, 
                    string ORGSTATUS, 
                    string ORGADDRESS, 
                    string ZIPCODE, 
                    string CONTACT, 
                    string CONTACTTEL, 
                    string EMAIL, 
                    string MEMO, 
                    global::System.Nullable<global::System.DateTime> CREATED, 
                    string CREATEDBY, 
                    string MODIFIEDBY, 
                    string ISVOID, 
                    string SUITEID, 
                    string DATABASEID, 
                    global::System.Nullable<global::System.DateTime> MODIFIED, 
                    string ORGANIZATIONID) {
            if ((ORGID == null)) {
                throw new global::System.ArgumentNullException("ORGID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ORGID));
            }
            if ((COUNTRY == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(COUNTRY));
            }
            if ((CITY == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CITY));
            }
            if ((PARENTORG == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(PARENTORG));
            }
            if ((PROVINCE == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PROVINCE));
            }
            if ((ORGCODE == null)) {
                throw new global::System.ArgumentNullException("ORGCODE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ORGCODE));
            }
            if ((ORGNAME == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ORGNAME));
            }
            if ((ORGTYPE == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ORGTYPE));
            }
            if ((ORGALIAS == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ORGALIAS));
            }
            if ((ORGSTATUS == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ORGSTATUS));
            }
            if ((ORGADDRESS == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ORGADDRESS));
            }
            if ((ZIPCODE == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(ZIPCODE));
            }
            if ((CONTACT == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(CONTACT));
            }
            if ((CONTACTTEL == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(CONTACTTEL));
            }
            if ((EMAIL == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(EMAIL));
            }
            if ((MEMO == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(MEMO));
            }
            if ((CREATED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((System.DateTime)(CREATED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((CREATEDBY == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(CREATEDBY));
            }
            if ((MODIFIEDBY == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(MODIFIEDBY));
            }
            if ((ISVOID == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(ISVOID));
            }
            if ((SUITEID == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(SUITEID));
            }
            if ((DATABASEID == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(DATABASEID));
            }
            if ((MODIFIED.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((System.DateTime)(MODIFIED.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((ORGANIZATIONID == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(ORGANIZATIONID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ORGID, 
                    string COUNTRY, 
                    string CITY, 
                    string PARENTORG, 
                    string PROVINCE, 
                    string ORGCODE, 
                    string ORGNAME, 
                    string ORGTYPE, 
                    string ORGALIAS, 
                    string ORGSTATUS, 
                    string ORGADDRESS, 
                    string ZIPCODE, 
                    string CONTACT, 
                    string CONTACTTEL, 
                    string EMAIL, 
                    string MEMO, 
                    global::System.Nullable<global::System.DateTime> CREATED, 
                    string CREATEDBY, 
                    string MODIFIEDBY, 
                    string ISVOID, 
                    string SUITEID, 
                    string DATABASEID, 
                    global::System.Nullable<global::System.DateTime> MODIFIED, 
                    string ORGANIZATIONID, 
                    string Original_ORGID) {
            if ((ORGID == null)) {
                throw new global::System.ArgumentNullException("ORGID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ORGID));
            }
            if ((COUNTRY == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(COUNTRY));
            }
            if ((CITY == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CITY));
            }
            if ((PARENTORG == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(PARENTORG));
            }
            if ((PROVINCE == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(PROVINCE));
            }
            if ((ORGCODE == null)) {
                throw new global::System.ArgumentNullException("ORGCODE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ORGCODE));
            }
            if ((ORGNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ORGNAME));
            }
            if ((ORGTYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ORGTYPE));
            }
            if ((ORGALIAS == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ORGALIAS));
            }
            if ((ORGSTATUS == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ORGSTATUS));
            }
            if ((ORGADDRESS == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ORGADDRESS));
            }
            if ((ZIPCODE == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(ZIPCODE));
            }
            if ((CONTACT == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(CONTACT));
            }
            if ((CONTACTTEL == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(CONTACTTEL));
            }
            if ((EMAIL == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(EMAIL));
            }
            if ((MEMO == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(MEMO));
            }
            if ((CREATED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(CREATED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((CREATEDBY == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(CREATEDBY));
            }
            if ((MODIFIEDBY == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(MODIFIEDBY));
            }
            if ((ISVOID == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(ISVOID));
            }
            if ((SUITEID == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(SUITEID));
            }
            if ((DATABASEID == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(DATABASEID));
            }
            if ((MODIFIED.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(MODIFIED.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((ORGANIZATIONID == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(ORGANIZATIONID));
            }
            if ((Original_ORGID == null)) {
                throw new global::System.ArgumentNullException("Original_ORGID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ORGID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string COUNTRY, 
                    string CITY, 
                    string PARENTORG, 
                    string PROVINCE, 
                    string ORGCODE, 
                    string ORGNAME, 
                    string ORGTYPE, 
                    string ORGALIAS, 
                    string ORGSTATUS, 
                    string ORGADDRESS, 
                    string ZIPCODE, 
                    string CONTACT, 
                    string CONTACTTEL, 
                    string EMAIL, 
                    string MEMO, 
                    global::System.Nullable<global::System.DateTime> CREATED, 
                    string CREATEDBY, 
                    string MODIFIEDBY, 
                    string ISVOID, 
                    string SUITEID, 
                    string DATABASEID, 
                    global::System.Nullable<global::System.DateTime> MODIFIED, 
                    string ORGANIZATIONID, 
                    string Original_ORGID) {
            return this.Update(Original_ORGID, COUNTRY, CITY, PARENTORG, PROVINCE, ORGCODE, ORGNAME, ORGTYPE, ORGALIAS, ORGSTATUS, ORGADDRESS, ZIPCODE, CONTACT, CONTACTTEL, EMAIL, MEMO, CREATED, CREATEDBY, MODIFIEDBY, ISVOID, SUITEID, DATABASEID, MODIFIED, ORGANIZATIONID, Original_ORGID);
        }
    }
}

#pragma warning restore 1591